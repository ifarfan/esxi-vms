---
#
#  Launch stack of VMs all at once
#
#  Disk Resize: https://kb.vmware.com/selfservice/microsites/search.do?language=en_US&cmd=displayKC&externalId=1002019
#
- name: Find running VM ID for "{{ vm.hostname }}"
  shell: >
    vim-cmd vmsvc/getallvms | grep {{ vm.hostname }} | cut -d" " -f1
  register: vm_info
  changed_when: "vm_info.rc == 0 and vm_info.stdout == ''"

- block:
  - name: Create local "{{ vm.hostname }}" ISO folder
    local_action:
      file
        path="{{ tmp_dir }}/{{ vm.hostname }}_iso"
        state=directory

  - name: Create custom "{{ vm.hostname }}" user-data
    local_action:
      template
        src=files/user-data.txt.j2
        dest="{{ tmp_dir }}/{{ vm.hostname }}_iso/user-data.txt"

  - name: Create local "{{ vm.hostname }}" ISO image
    local_action: command mkisofs -o {{ vm.hostname }}.iso -r {{ vm.hostname }}_iso
      chdir={{ tmp_dir }}
      creates={{ tmp_dir }}/{{ vm.hostname }}.iso
    tags: [ skip_ansible_lint ]

  - name: Create "{{ vm.hostname }}" VM folder
    file:
      path="/vmfs/volumes/datastore1/{{ vm.hostname }}"
      state=directory

  - name: Upload "{{ vm.hostname }}" ISO
    copy:
      src="{{ tmp_dir }}/{{ vm.hostname }}.iso"
      dest="/vmfs/volumes/datastore1/{{ vm.hostname }}/user-data.iso"
      owner=root
      group=root
      mode=0644

  - name: Clone pre-existing VM for "{{ vm.hostname }}"... (will take a bit)
    command: >
      vmkfstools -i
        /vmfs/volumes/datastore1/{{ vm.clone_vm }}/{{ vm.clone_vm }}.vmdk
        /vmfs/volumes/datastore1/{{ vm.hostname }}/{{ vm.hostname }}.vmdk
      creates=/vmfs/volumes/datastore1/{{ vm.hostname }}/{{ vm.hostname }}.vmdk
    tags: [ skip_ansible_lint ]

  # - name: Resize "{{ vm.hostname }}" VM disk
  #   command: >
  #     vmkfstools -X {{ vm.hardware.disk }}g /vmfs/volumes/datastore1/{{ vm.hostname }}/{{ vm.hostname }}.vmdk
  #   tags: [ skip_ansible_lint ]

  - name: Create "{{ vm.hostname }}" .vmx file
    template:
      src=files/clone.vmx.j2
      dest="/vmfs/volumes/datastore1/{{ vm.hostname }}/{{ vm.hostname }}.vmx"

  - name: Register "{{ vm.hostname }}" VM
    command: >
      vim-cmd solo/registervm /vmfs/volumes/datastore1/{{ vm.hostname }}/{{ vm.hostname }}.vmx
      creates=/vmfs/volumes/datastore1/{{ vm.hostname }}/{{ vm.hostname }}.vmsd
    register: register_result
    tags: [ skip_ansible_lint ]

  - name: Start "{{ vm.hostname }}" VM
    command: >
      vim-cmd vmsvc/power.on {{ register_result.stdout }}
    when: "register_result.rc == 0 and vm.up == true"
    tags: [ skip_ansible_lint ]

  when: "vm_info.rc == 0 and vm_info.stdout == ''"

- name: Remove local "{{ vm.hostname }}" ISO folder/files
  local_action:
    file
      path="{{ tmp_dir }}/{{ vm.hostname }}{{ file_ext }}"
      state=absent
  with_items:
    - "_iso"
    - ".iso"
  loop_control:
    loop_var: file_ext

- name: Notify of delay due to cloudinit reboot
  pause:
    seconds=5
    prompt="Note that cloudinit will reboot each VM as part of its own provisioning, thus please allow for a few seconds before connecting to each VM"
